{"version":3,"sources":["components/Main.js","components/Secret.js","Auth.js","components/Callback.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Main","react_default","a","createElement","this","props","general","href","auth","isAuthenticated","className","src","alt","onClick","login","id","title","sandbox","width","height","allowFullScreen","Component","Secret","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","apiData","_this2","fetch","then","res","json","setState","map","av","key","firstname","surname","logout","require","config","Auth","auth0","WebAuth","domain","clientID","process","redirectUri","audience","responseType","scope","code_challenge_method","code_challenge","bind","authorize","parseHash","err","authResults","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","location","hash","pathname","console","log","parse","getItem","removeItem","jwtDecode","Callback","handleAuthentication","NotFound","App","mainComponent","Main_Main","Callback_Callback","Secret_Secret","NotFound_NotFound","lib_default","name","content","httpEquiv","style","picture","Boolean","window","hostname","match","changes","assign","ReactDOM","render","src_App_0","document","getElementById","initialState","getProfile","given_name","replace","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b840c0fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\n\r\nconst url = \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2498.399885195848!2d4.413983615726766!3d51.230129879590564!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47c3f652fb581f19%3A0x4da1a65961921228!2sEllermanstraat+33%2C+2060+Antwerpen!5e0!3m2!1snl!2sbe!4v1552152724898\";\r\nconst googleLogo = \"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\";\r\n\r\n\r\nexport default class Main extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <p>\r\n                    React page with Integrated Auth0!\r\n                    </p>\r\n                <p>hello there: {this.props.general}, do you want to see the secret area <a href=\"/secret\">klik dan hier.</a></p>\r\n                <div>\r\n\r\n                </div>\r\n\r\n                {!this.props.auth.isAuthenticated() &&\r\n\r\n                    <div className=\"google-btn\"  >\r\n                        <div className=\"google-icon-wrapper\">\r\n                            <img className=\"google-icon-svg\" src={googleLogo} alt=\"google\" />\r\n                        </div>\r\n                        <p className=\"btn-text\" onClick={this.props.auth.login}><b>Continue with Google</b></p>\r\n                    </div>\r\n                }\r\n\r\n                <iframe id=\"iframeinput\" title=\"online\" src='https://www.editpad.org/'\r\n                    sandbox=\"allow-same-origin allow-scripts\"\r\n                    width=\"300\" height=\"200\">\r\n                </iframe>\r\n\r\n                <iframe title=\"maps\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"\r\n                    src={url}\r\n                    width=\"300\" height=\"200\" allowFullScreen>\r\n                </iframe>\r\n\r\n\r\n\r\n            </div >\r\n\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Secret extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      apiData: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/apiData')\r\n      .then(res => res.json())\r\n      .then(apiData => this.setState({ apiData }))\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Area 51, this is definitely a secret place!</p>\r\n\r\n        <p>here below are the API Names from expressJS</p>\r\n          {this.state.apiData.map(av => {\r\n          return <li key={av.id} >{av.firstname} {av.surname}</li>})}\r\n\r\n        <p>go back to <a href=\"/\">home</a></p>\r\n        <button onClick={this.props.auth.logout}>logout</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/*eslint no-restricted-globals: 0 */\r\nimport auth0 from 'auth0-js';\r\nimport jwtDecode from 'jwt-decode';\r\n/*import dotenv from 'dotenv'\r\ndotenv.config();*/\r\nrequire('dotenv').config()\r\n\r\n//const dotenv = require('dotenv').config();\r\n\r\nconst LOGIN_SUCCESS_PAGE = \"/secret\";\r\nconst LOGIN_FAILURE_PAGE = \"/\";\r\n\r\n\r\n\r\nexport default class Auth {\r\n    auth0 = new auth0.WebAuth({\r\n        domain: 'vitamine.auth0.com',\r\n        clientID: process.env.REACT_APP_CLIENT_ID,\r\n        redirectUri: 'https://react-auth0.netlify.com/callback',\r\n        audience: 'https://expressapi-av.herokuapp.com/apiData',\r\n        responseType: 'token id_token',\r\n        scope: 'openid profile read:expressapi-av',\r\n        code_challenge_method: '',\r\n        code_challenge: '',\r\n    });\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n    }\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n    handleAuthentication() {\r\n        this.auth0.parseHash((err, authResults) => {\r\n            if (authResults && authResults.accessToken && authResults.idToken) {\r\n                let expiresAt = JSON.stringify((authResults.expiresIn) * 1000 + new Date().getTime());\r\n                localStorage.setItem(\"access-token\", authResults.accessToken);\r\n                localStorage.setItem(\"id-token\", authResults.idToken);\r\n                localStorage.setItem(\"expiresAt\", expiresAt);\r\n                location.hash = \"\";\r\n                location.pathname = LOGIN_SUCCESS_PAGE;\r\n            } else if (err) {\r\n                location.pathname = LOGIN_FAILURE_PAGE;\r\n                console.log(err);\r\n            }\r\n        })\r\n    }\r\n\r\n    isAuthenticated() {\r\n        let expiresAt = JSON.parse(localStorage.getItem(\"expiresAt\"));\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"access-token\");\r\n        localStorage.removeItem(\"id-token\");\r\n        localStorage.removeItem(\"expiresAt\");\r\n        location.pathname = LOGIN_FAILURE_PAGE;\r\n    }\r\n\r\n    getProfile() {\r\n        if (localStorage.getItem(\"id-token\")) {\r\n            return jwtDecode(localStorage.getItem(\"id-token\"));\r\n        } else {\r\n            return {};\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport Auth from '../Auth';\r\n\r\nexport default class Callback extends Component {\r\n  componentDidMount(){\r\n    const auth = new Auth();\r\n    auth.handleAuthentication();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        Loading...\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class NotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        WOW Mate, what are u doing? Page is not found\r\n        <p>click <a href=\"/\">here</a> to go back from where you came mathafacka </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport MetaTags from 'react-meta-tags';\nimport './App.css';\nimport Main from './components/Main';\nimport Secret from './components/Secret';\nimport Callback from './components/Callback';\nimport NotFound from './components/NotFound';\n\n\n\nclass App extends Component {\n  render() {\n    let mainComponent = \"\";\n    switch (this.props.location) {\n      case \"\":\n        mainComponent = <Main {...this.props} />;\n        break;\n      case \"callback\":\n        mainComponent = <Callback />;\n        break;\n      case \"secret\":\n        mainComponent = this.props.auth.isAuthenticated() ? <Secret {...this.props} /> : <NotFound />;\n        break;\n      default:\n        mainComponent = <NotFound />;\n    }\n\n\n    return (\n      <div className=\"App\">\n        <MetaTags>\n          <title>security</title>\n          <meta name=\"description\" content=\"Assignment web application security.\" />\n          <meta httpEquiv=\"Content-Security-Policy\" content=\"\n                        default-src *;  \n                        script-src; 'self' \n                        sandbox\n                        img-src 'self';\n                        style-src 'self' https://fonts.googleapis.com 'unsafe-inline';\n                        font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com data:;\n                        upgrade-insecure-requests; block-all-mixed-content;\n                        connect-src 'self'\n           \"/>\n\n\n\n        </MetaTags>\n        <div>\n          <h1 className=\"App-title\">\n            oh hi {this.props.name}\n          </h1>\n          <img style={{ width: '50px', height: '50px' }} src={this.props.picture || \"\"} alt=\"\" />\n          {mainComponent}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Auth from './Auth';\n\nlet state = {};\nconst auth = new Auth();\n\nwindow.setState = (changes) => {\n    state = Object.assign({},state, changes);\n    ReactDOM.render(<App {...state} />, document.getElementById('root'));\n};\n/*eslint no-restricted-globals: 0 */\nlet username = auth.getProfile().given_name;\nlet picture = auth.getProfile().picture;\n\n\nlet initialState = {\n    name: username,\n    picture: picture,\n    general: \"General kenoby\",\n    location: location.pathname.replace(/^\\/?|\\/$/g,\"\"),\n    auth\n};\n\nwindow.setState(initialState);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}